#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<fstream>
#include<sstream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
using namespace std;
struct node{
	int id,sid,time;
}data[1000000];
int cnt[30][70000];
int res[30][70000];
int tmp = 0;
int map[2][16][30] = {
   // 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
   {{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,21,21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1},
	{-1, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0,-1,-1,-1, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,-1},
	{-1, 9, 9, 9, 9, 9, 0,13,13, 0, 0, 0,-1,-1,-1, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,-1},
	{-1,10,10,10,10,10, 0,13,13, 0,18,18,-1,-1,-1, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,-1},
	{-1,10,10,10,10,10, 0,13,13, 0,18,18,-1,-1,-1, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,-1},
	{-1,11,11,11,11,11, 0,13,13, 0, 1, 1,-1,-1,-1, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,-1},
	{-1,11,11,11,11,11, 0,13,13, 0, 1, 1,-1,-1,-1, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,-1},
	{-1,12,12,12,12,12, 0,13,13, 0, 1, 1,-1,-1,-1, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,-1},
	{-1,12,12,12,12,12, 0,13,13, 0, 1, 1,-1,-1,-1, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,-1},
	{-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 2, 2,-1,-1,-1, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,-1},
	{-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 2, 2,-1,-1,-1, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,-1},
	{-1, 0,14,14,14,14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1},
	{ 0, 0,14,14,14,14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1},
	{-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,21,21, 0, 0, 0, 0, 0, 0, 0,17,17, 3, 3, 3, 3, 4, 4,19,19,-1},
	{-1,-1, 0,-1, 0, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,17,17, 3, 3, 3, 3, 4, 4,19,19,-1},},
   // 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
   {{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,21,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,15,15,15,15,15, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,15,15,15,15,15, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,15,15,15,15,15, 0, 0, 0, 0,20,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,15,15,15,15,15, 0, 0, 0, 0,20,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,15,15,15,15,15, 0, 0, 0, 0, 6, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,15,15,15,15,15, 0, 0, 0, 0, 6, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,15,15,15,15,15, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,15,15,15,15,15, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1, 5, 5, 5, 5, 5, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1, 5, 5, 5, 5, 5, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{16,16,16,16,16,16, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{16,16,16,16,16,16, 0, 0, 0, 0,21,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{16,16,16,16,16,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},}
};
bool cmp(node a,node b) {
	if (a.id==b.id) return a.time<b.time;
	else return a.id<b.id;
}
void init() {
	ifstream fin("E:\\day3.csv");
	string str;
	bool flag = false;
	while (getline(fin,str)) {
		if (!flag) {
			flag = true;
			continue;
		}
		tmp ++;
		int id = 0,sid = 0,time = 0,k = 0;
		for (int i=0;i<str.length();i++) {
			if (str[i]==',') {
				k++;
				continue;
			}
			if (k==0) id = id * 10 + (str[i]-'0');
			else if (k==1) sid = sid * 10 + (str[i]-'0');
			else time = time * 10 + (str[i]-'0');
		}
		data[tmp].id = id;
		data[tmp].sid = sid;
		data[tmp].time = time; 
	}
	fin.clear();
	fin.close();
	sort(data+1,data+1+tmp,cmp);
} 
int getpos(int x) {
	//cout << x/10000 << " " << ((x/100)%100) << " " << (x%100) << endl; 
	//cout << map[x/10000-1][(x/100)%100][x%100] << endl;
	return map[x/10000-1][(x/100)%100][x%100];
}
int main()
{
	init();
	/*cout << tmp << endl;
	cout << data[1].id << ' ' << data[1].time << ' ' << data[1].sid << endl;
	for (int i=2;i<=tmp;i++) {
		if (data[i].id == data[1].id) {
			cout << data[i].id << ' ' << data[i].time << ' ' << data[i].sid << endl;
			cout << getpos(data[i].sid) << endl;
		}
	}*/
	int cid = 0;
	int cpos = -2;
	for (int i=1;i<=tmp;i++) {
		//cout << data[i].id << ' ' << data[i].time << ' ' << data[i].sid << endl;
		if (data[i].id!=cid) {
			cid = data[i].id;
			cpos = -2;
		}
		if (cpos==-2 || cpos==getpos(data[i].sid)) {
			cpos = getpos(data[i].sid);
			if (cpos==-2) cnt[cpos][data[i].time] ++; 
			continue;
		}
		cnt[cpos][data[i].time] --;
		//cout << "dec: " << cpos << ' ' << data[i].time << endl;
		cpos = getpos(data[i].sid);
		cnt[cpos][data[i].time] ++; 
		//cout << "inc: " << cpos << ' ' << data[i].time << endl;
	}
	int answer[50];
	for (int i=0;i<=21;i++) {
		res[i][0] = 0;
		int ans = 0;
		for (int j=1;j<=70000;j++) {
			res[i][j] = res[i][j-1] + cnt[i][j];
			ans = max(ans,res[i][j]);
		}
		answer[i] = ans;
		cout << i << " " << ans << endl;
	}
	/* 
	for (int i=1;i<=21;i++){
		char filename[50];
		sprintf(filename, "E:\\%d.txt", i);
		FILE *fp=fopen(filename,"w");
		fprintf(fp,"{\n\"date\": \"thirdday\",\n\"show\": true,\n\"color\": \"black\",\n\"max\": %d,\n\"people\": [\n",answer[i]);
		int m = 0;
		for (int j=1;j<=70000;j++) {
			if(res[i][j]!=m){
				fprintf(fp,"{\n\"time\": %d,\n\"num\": %d\n},\n",j,res[i][j]);
				m = res[i][j];
			}
		}
		fprintf(fp,"]\n},\n");
		fclose(fp); 
	}

	FILE *fp1=fopen("E:\\111.txt","w");
	for (int i=0;i<=15;i++){
		for(int j=0;j<=29;j++){
			fprintf(fp1,"%d\n",map[0][i][j]);
		}
	}
	fclose(fp1);
	FILE *fp2=fopen("E:\\222.txt","w");
	for (int i=0;i<=15;i++){
		for(int j=0;j<=29;j++){
			fprintf(fp2,"%d\n",map[1][i][j]);
		}
	}
	fclose(fp2);
	*/
}










